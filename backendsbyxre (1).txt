
import requests
import json
from flask import Flask, jsonify, request


class GameInfo:
    def __init__(self):
        self.title_id = "4219B"
        self.secret_key = "TG7YBIWX9PYS8GYS4T35BP7ONHK7XAU77RORZSNUCEGZ1Y8FO3"
        self.api_key = "OC|9025396674241129|8be563a2fb451d71305c043639770d70"

    def get_auth_headers(self) -> dict:
        return {
            "content-type": "application/json",
            "X-SecretKey": self.secret_key
        }


settings = GameInfo()
app = Flask(__name__)

playfab_cache = {}
mute_cache = {}


def return_function_json(data, funcname, funcparam={}):
    user_id = (
        data.get("FunctionParameter", {})
        .get("CallerEntityProfile", {})
        .get("Lineage", {})
        .get("TitlePlayerAccountId")
    )

    req = requests.post(
        url=f"https://{settings.title_id}.playfabapi.com/Server/ExecuteCloudScript",
        json={"PlayFabId": user_id, "FunctionName": funcname, "FunctionParameter": funcparam},
        headers=settings.get_auth_headers(),
    )

    return jsonify(req.json().get("data", {}).get("FunctionResult", {})), req.status_code


@app.route("/", methods=["GET", "POST"])
def main():
    return "You're not supposed to be here."


@app.route("/api/PlayFabAuthentication", methods=["POST"])
def playfab_authentication():
    rjson = request.get_json()
    required_fields = ["CustomId", "Nonce", "AppId", "Platform", "OculusId"]

    for field in required_fields:
        if field not in rjson:
            return jsonify({"Message": f"Missing {field} parameter", "Error": f"BadRequest-No{field}"}), 400

    if rjson["AppId"] != settings.title_id:
        return jsonify({"Message": "Request sent for the wrong App ID", "Error": "BadRequest-AppIdMismatch"}), 400

    if not rjson["CustomId"].startswith(("OC", "PI")):
        return jsonify({"Message": "Bad request", "Error": "BadRequest-No OC or PI Prefix"}), 400

    url = f"https://{settings.title_id}.playfabapi.com/Server/LoginWithServerCustomId"
    login_request = requests.post(
        url, json={"ServerCustomId": rjson["CustomId"], "CreateAccount": True}, headers=settings.get_auth_headers()
    )

    if login_request.status_code == 200:
        data = login_request.json().get("data", {})
        return jsonify(
            {
                "PlayFabId": data.get("PlayFabId"),
                "SessionTicket": data.get("SessionTicket"),
                "EntityToken": data.get("EntityToken", {}).get("EntityToken"),
                "EntityId": data.get("EntityToken", {}).get("Entity", {}).get("Id"),
                "EntityType": data.get("EntityToken", {}).get("Entity", {}).get("Type"),
            }
        )

    error_details = login_request.json().get("errorDetails", {})
    first_error = next(iter(error_details), "Unknown Error")
    return jsonify({"BanMessage": first_error, "BanExpirationTime": str(error_details.get(first_error, ""))})


@app.route("/api/CachePlayFabId", methods=["POST"])
def cache_playfab_id():
    rjson = request.get_json()
    playfab_cache[rjson.get("PlayFabId")] = rjson
    return jsonify({"Message": "Success"}), 200


@app.route("/api/TitleData", methods=["POST"])
def title_data():
    return jsonify(
        {
            "MOTD": "<color=pink>WELCOME TO BLAWG TAGGERS</color>\n<color=red>SPRINGCLEANING!</color>\n"
            "<color=blue>NEXT UPDATE:?</color>\n\nCREDITS:DEPRESSO,REEL\n\nJOIN THE DISCORD:https://discord.gg/jmtkkXBB5z"
        }
    )


@app.route("/api/CheckForBadName", methods=["POST"])
def check_for_bad_name():
    rjson = request.get_json()
    name = rjson["FunctionArgument"]["name"].upper()

    bad_words = {
        "KKK", "PENIS", "NIGG", "NEG", "NIGA", "MONKEYSLAVE", "SLAVE", "FAG", "NAGGI", "TRANNY",
        "QUEER", "KYS", "DICK", "PUSSY", "VAGINA", "BIGBLACKCOCK", "DILDO", "HITLER", "SEX", "COCK",
        "CUM", "FUCK", "JEW", "JAXX", "TTTPIG", "PORNO", "JMAN", "NIGGER", "NIGGA", "IHATENIGGERS",
        "NI9", "NEGRO", "KNEEGROW", "@here", "@everyone", "_", "!"
    }

    return jsonify({"result": 2 if name in bad_words else 0})


@app.route("/api/consumeiap", methods=["POST"])
def consume_oculus_iap():
    rjson = request.get_json()

    req = requests.post(
        url=f"https://graph.oculus.com/consume_entitlement?nonce={rjson['nonce']}&user_id={rjson['userID']}&sku={rjson['sku']}&access_token={settings.api_key}",
        headers={"content-type": "application/json"},
    )

    return jsonify({"result": req.json().get("success", False)})


@app.route("/api/photon", methods=["POST"])
def photon_auth():
    rjson = request.get_json()
    ticket = rjson.get("Ticket")

    if not ticket or "-" not in ticket:
        return jsonify({"resultCode": 2, "message": "Invalid token", "userId": None, "nickname": None})

    user_id = ticket.split("-")[0]

    req = requests.post(
        url=f"https://{settings.title_id}.playfabapi.com/Server/GetUserAccountInfo",
        json={"PlayFabId": user_id},
        headers=settings.get_auth_headers(),
    )

    if req.status_code == 200:
        nickname = req.json().get("UserInfo", {}).get("UserAccountInfo", {}).get("Username", None)
        return jsonify(
            {
                "resultCode": 1,
                "message": f"Authenticated user {user_id.lower()}",
                "userId": user_id.upper(),
                "nickname": nickname,
            }
        )

    return jsonify({"resultCode": 0, "message": "Something went wrong", "userId": None, "nickname": None})


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8084)
